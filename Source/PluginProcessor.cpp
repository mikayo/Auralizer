/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "HrtfFilter.h"
#include "PitchShift.h"
#include <iostream>
#include <math.h>

#define PI 3.14159265

//==============================================================================
AuralizerAudioProcessor::AuralizerAudioProcessor()
{
    preGain_ = 1.0f;
    angle_ = 0.0f;
    speed_ = 1.0f;
    outputGain_ = 1.0f;
    automation_ = 0.0f;
    bypass_ = 0.0f;
    invert_ = 0.0f;
    pitch_ = 0.0f;
    
    filter_.set();
}

AuralizerAudioProcessor::~AuralizerAudioProcessor()
{
}

//==============================================================================
const String AuralizerAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int AuralizerAudioProcessor::getNumParameters()
{
    return kNumParameters;
}

float AuralizerAudioProcessor::getParameter (int index)
{
    switch (index)
    {
        case kPreGainParam:
            return preGain_;
        case kAngleParam:
            return angle_;
        case kSpeedParam:
            return speed_;
        case kOutputGainParam:
            return outputGain_;
        case kAutomationParam:
            return automation_;
        case kBypassParam:
            return bypass_;
        case kInvertParam:
            return invert_;
        case kPitchParam:
            return pitch_;
        default:
            return 0.0f; // invalid index
    }
}

void AuralizerAudioProcessor::setParameter (int index, float newValue)
{
    switch (index)
    {
        case kPreGainParam:
            preGain_ = newValue;
            break;
        case kAngleParam:
            angle_ = newValue;
            break;
        case kSpeedParam:
            speed_ = newValue;
            break;
        case kOutputGainParam:
            outputGain_ = newValue;
            break;
        case kAutomationParam:
            automation_ = newValue;
            break;
        case kBypassParam:
            bypass_ = newValue;
            break;
        case kInvertParam:
            invert_ = newValue;
            break;
        case kPitchParam:
            pitch_ = newValue;
            break;
        default:
            return;        
    }
}

const String AuralizerAudioProcessor::getParameterName (int index)
{
    switch (index)
    {
        case kPreGainParam:
            return "Pre Gain";
        case kAngleParam:
            return "Source Angle";
        case kSpeedParam:
            return "Source Speed";
        case kOutputGainParam:
            return "Output Gain";
        case kAutomationParam:
            return "Source Automation";
        case kBypassParam:
            return "Bypass";
        case kInvertParam:
            return "Invert Direction";
        case kPitchParam:
            return "Pitch Shift";
        default:
            return String();  
    }
}

const String AuralizerAudioProcessor::getParameterText (int index)
{
    return String();
}

const String AuralizerAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String AuralizerAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool AuralizerAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool AuralizerAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool AuralizerAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool AuralizerAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool AuralizerAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double AuralizerAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int AuralizerAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int AuralizerAudioProcessor::getCurrentProgram()
{
    return 0;
}

void AuralizerAudioProcessor::setCurrentProgram (int index)
{
}

const String AuralizerAudioProcessor::getProgramName (int index)
{
    return String();
}

void AuralizerAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void AuralizerAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    
}

void AuralizerAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void AuralizerAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // check conditions
    if (getSampleRate()!= 44100) // filters are generated for this sample rate
        return;                  // sample rate conversion could be added in
    if (bypass_ == 1.0f)         // the future
        return;
    else
    {
        const int bufferLength = buffer.getNumSamples();
        if (bufferLength < 100)  // buffer length must be at least the filter length
            return;
        
        // get pointers
        float* inLeft = buffer.getWritePointer(0);
        float* inRight = buffer.getWritePointer(1);
        
        // pre gain
        buffer.applyGain(preGain_);
        
        // downmix stereo input to mono
        if (getNumInputChannels() == 2)
        {
            buffer.addFrom(0, 0, inRight, bufferLength);
            buffer.applyGain(0.5f);
        }
        
        // HRTF filtering
        filter_.setAngle(angle_);
        filter_.ClockProcess(inLeft, inRight, bufferLength);
    
        // automation control
        if (automation_ == 1.0f)
        {
            // pitch parameters
            long numSampsToProcess = bufferLength;
            long fftFrameSize = 128;
            long osamp = 32;
            float dl, dr;
            float shiftLeft, shiftRight;
            
            if (invert_ == 1.0f)
            {
                // pitch shifting
                if (pitch_ == 1.0f)
                {
                    dl = sqrt(pow((cos(angle_*PI/180)+0.1),2)+pow(sin(angle_*PI/180),2));
                    dr = sqrt(pow((cos(angle_*PI/180)-0.1),2)+pow(sin(angle_*PI/180),2));
                    
                    if (angle_ < 90 || angle_ >= 270)
                    {
                        shiftLeft = dl/0.9;
                        shiftRight = dr/1.1;
                    }
                    
                    else
                    {
                        shiftLeft = dl/1.1;
                        shiftRight = dr/0.9;
                    }
                    
                    smbPitchShift(shiftLeft, numSampsToProcess, fftFrameSize, osamp, (float)getSampleRate(), inLeft, inLeft);
                    smbPitchShift(shiftRight, numSampsToProcess, fftFrameSize, osamp, (float)getSampleRate(), inRight, inRight);
                }

                // update angle
                angle_ -= speed_;
                if (angle_ < 0)
                {
                    angle_ += 359;
                }
            }
            else
            {
                // pitch shifting
                if (pitch_ == 1.0f)
                {
                    dl = sqrt(pow((cos(angle_*PI/180)+0.1),2)+pow(sin(angle_*PI/180),2));
                    dr = sqrt(pow((cos(angle_*PI/180)-0.1),2)+pow(sin(angle_*PI/180),2));
                    
                    if (angle_ < 90 || angle_ >= 270)
                    {
                        shiftLeft = dl/1.1;
                        shiftRight = dr/0.9;
                    }
                    
                    else
                    {
                        shiftLeft = dl/0.9;
                        shiftRight = dr/1.1;
                    }
                    
                    smbPitchShift(shiftLeft, numSampsToProcess, fftFrameSize, osamp, (float)getSampleRate(), inLeft, inLeft);
                    smbPitchShift(shiftRight, numSampsToProcess, fftFrameSize, osamp, (float)getSampleRate(), inRight, inRight);
                }
                
                // update angle
                if (angle_ + speed_ < 359)
                    angle_ += speed_;
                else
                    angle_ += speed_ - 359;
            }
            
        }
        
        // low-pass filter
        
        // output gain
        buffer.applyGain(outputGain_);
    }
}

//==============================================================================
bool AuralizerAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* AuralizerAudioProcessor::createEditor()
{
    return new AuralizerAudioProcessorEditor (*this);
}

//==============================================================================
void AuralizerAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void AuralizerAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new AuralizerAudioProcessor();
}
